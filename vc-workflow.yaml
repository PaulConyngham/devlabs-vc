AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description : "Creates the Session Workflow StepFunctions" 

Outputs:
  SumerianMessageQueueFIFO:
    Description: The message queue that will be used to receive instructions from workflow.
    Value: !Ref SumerianMessageQueueFIFO
  SessionManagerSNSTopic:
    Description: SNS topic responsible to send Face informatin to SessionManager Function
    Value: !Ref SessionManagerSNSTopic
  FaceBucket:
    Description: The S3 Bucket Containing people Mug Face.
    Value: 
        !Sub 
          - '${StackId}-facebucket-${AWS::Region}-${AWS::AccountId}'
          - { StackId: !Ref 'AWS::StackId' }
  FaceCollectionId:
    Description: Your Recognition Face CollectionId
    Value: !GetAtt FaceCollectionCustom.CollectionId
  VisitorTable:
    Description: The DynamoDB Containing Registered Visitor Table
    Value: !Ref VisitorTable

Parameters: 
  HostEmailAddress: 
    Type: String
    Description: Please enter the email addess you would like the virtual concierge to send notification to.
    
Resources:
            
  #########################################################
  # Resouces for the entire workflow to do it's acitivity #
  #( This is not a secured, please take measure to secure if going to prod)
  #########################################################
  WorkflowFunctionsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
          AssumeRolePolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "apigateway.amazonaws.com"
                    - "lambda.amazonaws.com"
                    -
                      Fn::Join:
                        - ""
                        - - "states."
                          -
                            Ref: "AWS::Region"
                          - ".amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Path: "/"
          Policies:
            -
              PolicyName: "Policies"
              PolicyDocument:
                Statement:
                  -
                    Effect: "Allow"
                    Action: "*"
                    Resource: "*"


  ####################################################################
  # Message Queue for sumerian to receive instructions from workflow #
  ####################################################################
  SumerianMessageQueueFIFO:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "SumerianMessageQueueFIFO.fifo"
      FifoQueue: true
            
  #########################################################
  # SNS Topic for Workflow to send Notification & Updates #
  #########################################################
  WorkflowNotificationSNSTopic: 
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "WorkflowNotificationSNSTopic"
      Subscription:
          - 
            Endpoint: !Ref HostEmailAddress
            Protocol: email
         
  #########################################################
  # SNS Topic That will receive detected face information #
  # To be paired with SessionManager Lambda Function      #
  #########################################################
  SessionManagerSNSTopic: 
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "SessionManagerSNSTopic"
      Subscription:
          - 
            Endpoint: !GetAtt SessionManager.Arn
            Protocol: lambda
         
  ########################################################
  # Lambda Functions responsible for the entier workdlow #
  ########################################################
  SumerianMessenger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sumerianmessenger.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function responsible for putting Message into SumerianMessageQueueFIFO'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Environment:
        Variables:
          QueueUrl: !Ref SumerianMessageQueueFIFO
      Layers:
          - !Ref WorkflowManagerToolKit

  CheckFaceCaptured:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: checkfacecaptured.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function to check if face captured'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Environment:
        Variables:
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit

  ClearSession:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: clearsession.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function Responsible to clear session'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Environment:
        Variables:
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit

  SessionManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sessionmanager.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function Responsible to manage session being executed'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref NotificationResponseApi }
          SessionTable: !Ref SessionTable
          WorkFlowArn: !Ref WorkFlowStateMachine
      Layers:
          - !Ref WorkflowManagerToolKit
          
  SessionManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SessionManager.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
          
  AppointmentLookup:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: appointmentlookup.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function responsible to check available appointment.'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Layers:
          - !Ref WorkflowManagerToolKit

  SendNotification:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sendnotification.lambda_handler
      Runtime: python3.6
      Description: 'Trigger Notification with a URL to response back'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref NotificationResponseApi }
          SNSTopic: !Ref WorkflowNotificationSNSTopic
          ActivityHostResponseArn: !Ref ActivityHostResponse
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit
          
  ResponseManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: responsemanager.lambda_handler
      Runtime: python3.6
      Description: 'Manage Virtual Concierge Session'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Layers:
          - !Ref WorkflowManagerToolKit
          
  FlattenResponse:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: flattenresponse.lambda_handler
      Runtime: python3.6
      Description: 'Flatten Payload response from List of JSON to JSON'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt WorkflowFunctionsExecutionRole.Arn
      CodeUri: s3://sssalim-devlabs-virtualconcierge/workflow-lambda.zip
      Layers:
          - !Ref WorkflowManagerToolKit
     
  WorkflowManagerToolKit:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: s3://sssalim-devlabs-virtualconcierge/workflow-layer.zip
      CompatibleRuntimes:
        - python3.6
      LicenseInfo: 'Apache License, Version 2.0 (the "License")'

  NotificationResponseApi:
    Type: 'AWS::Serverless::Api'
    Properties:
        Name: NotificationResponseApi
        StageName: Prod
        DefinitionBody: 
          swagger: "2.0"
          schemes:
          - "https"
          paths:
            /notifyguest:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "token"
                  in: "query"
                  required: true
                  type: "string"
                - name: "state"
                  in: "query"
                  required: true
                  type: "string"
                responses: {"200": {"description": "200 response","schema": {"$ref": "#/definitions/Empty"}}}
                x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
                x-amazon-apigateway-integration:
                  credentials: !GetAtt WorkflowFunctionsExecutionRole.Arn
                  uri: 
                    'Fn::Sub':
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${lambdafunc}/invocations"
                        - { lambdafunc: !GetAtt ResponseManager.Arn }
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "{\"HostResponse\":{\"ActivityToken\":\"$input.params('token')\",\"Response\":\"$input.params('state')\"}}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  type: "aws"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
          x-amazon-apigateway-request-validators:
            Validate query string parameters and headers:
              validateRequestParameters: true
              validateRequestBody: false
              
              
  ######################################
  # DynamoDB Tables to manage Sessions #
  ######################################

  
  SessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "VisitorId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "VisitorId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "WorkFlowSessionTable"


  #############################################
  # StepFunction Resources to manage Sessions #
  #############################################

  ActivityHostResponse:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: ActivityHostResponse
      
  ActivityHostArrival:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: ActivityHostArrival

  WorkFlowStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
                  !Sub  
                    - |-
                        {
                        	"Comment": "[Sumerian] State Machine",
                        	"StartAt": "Check detected face",
                        	"States": {
                        		"Check detected face": {
                        			"Type": "Task",
                        			"Resource": "${CheckFaceCaptured}",
                        			"Next": "Do we know the Face ?"
                        		},
                        		"Do we know the Face ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] unkown guest message"
                        				},
                        				{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] greet guest"
                        				}
                        			],
                        			"Default": "[Sumerian] unkown guest message"
                        		},
                        		"[Sumerian] unkown guest message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "UnknownGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"End": true
                        		},
                        		"[Sumerian] no appointment message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NoAppointment",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Clear Session"
                        		},
                        		"[Sumerian] greet guest": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "GreetGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Lookup Appointment"
                        		},
                        		"Lookup Appointment": {
                        			"Type": "Task",
                        			"Resource": "${AppointmentLookup}",
                        			"Next": "Do we found any appointment ?"
                        		},
                        		"Do we found any appointment ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] notify host message"
                        				},
                        				{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] no appointment message"
                        				}
                        			],
                        			"Default": "[Sumerian] no appointment message"
                        		},
                        		"[Sumerian] notify host message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NotifyHost",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Send notification to host"
                        		},
                        
                        		"Send notification to host": {
                        			"Type": "Parallel",
                        			"Next": "Flatten response payload",
                        			"Branches": [{
                        					"StartAt": "Notify host",
                        					"States": {
                        						"Notify host": {
                        							"Type": "Task",
                        							"Resource": "${SendNotification}",
                        							"Parameters" : {
                                			  "Activity" : "HostResponse",
                                			  "PreviousStateOutput.$" : "$"
                                			},
                        							"End": true
                        						}
                        					}
                        				},
                        				{
                        					"StartAt": "ActivityJob-Wait for host response",
                        					"States": {
                        						"ActivityJob-Wait for host response": {
                        							"Type": "Task",
                        							"Resource": "${ActivityHostResponse}",
                        							"End": true
                        						}
                        					}
                        				}
                        			]
                        		},
                        		"Flatten response payload": {
                        			"Type": "Task",
                        			"Resource": "${FlattenResponse}",
                        			"Next": "Has the host responded ?"
                        		}, 	
                        		"Has the host responded ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "NotifyGuest",
                        					"Next": "[ Sumerian ] Notify Visitor on Host Response"
                        				},
                        				{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "RemindHost",
                        					"Next": "[ Sumerian ] Notify Visitor on Remind Host"
                        				}
                        			],
                        			"Default": "[ Sumerian ] Notify Visitor on Remind Host"
                        		},
                        		"[ Sumerian ] Notify Visitor on Remind Host": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Next": "Send notification to host"
                        		}, 		
                        		"[ Sumerian ] Notify Visitor on Host Response": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Next": "Clear Session"
                        		},
                        		"Clear Session":{
                        			"Type": "Task",
                        			"Resource": "${ClearSession}",
                        			"End": true
                        		}
                        	}
                        }
                    - { ClearSession: !GetAtt ClearSession.Arn, FlattenResponse: !GetAtt FlattenResponse.Arn, SendNotification: !GetAtt SendNotification.Arn, ActivityHostResponse: !Ref ActivityHostResponse , ActivityHostArrival: !Ref ActivityHostArrival , SumerianMessenger: !GetAtt SumerianMessenger.Arn, CheckFaceCaptured: !GetAtt CheckFaceCaptured.Arn, AppointmentLookup: !GetAtt AppointmentLookup.Arn }
      RoleArn: !GetAtt WorkflowFunctionsExecutionRole.Arn
      
      
#####################
# Rekognitin resource
#####################

  VisitorTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "VisitorId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "VisitorId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
        TableName: "WorkFlowVisitorTable"
  CustomResourceExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
          AssumeRolePolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    -
                      Fn::Join:
                        - ""
                        - - "states."
                          -
                            Ref: "AWS::Region"
                          - ".amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Path: "/"
          Policies:
            -
              PolicyName: "Policies"
              PolicyDocument:
                Statement:
                  -
                    Effect: "Allow"
                    Action: "*"
                    Resource: "*"
  FaceCollectionCustom:
      Type: Custom::FaceCollectionCustom
      Version: 1.0
      Properties:
        ServiceToken: !GetAtt FaceCollection.Arn
        CollectionId: 
            !Sub 
              - '${StackId}-collectionId-${AWS::Region}-${AWS::AccountId}'
              - { StackId: !Ref 'AWS::StackId' }
  FaceCollection:
        Type: "AWS::Lambda::Function"
        Properties:
          Handler: index.lambda_handler
          Role: !GetAtt CustomResourceExecutionRole.Arn
          Runtime: python3.6
          Timeout: 120
          Code:
            ZipFile: |
              import boto3
              import cfnresponse

              def lambda_handler(event, context):
                  try:
                      if event['RequestType'] == 'Delete':
                      
                        collectionId=event['ResourceProperties']['CollectionId']
                        print('Attempting to delete collection ' + collectionId)
                        client=boto3.client('rekognition')
                        statusCode=''
                        try:
                            response=client.delete_collection(CollectionId=collectionId)
                            statusCode=response['StatusCode']
                        except ClientError as e:
                            if e.response['Error']['Code'] == 'ResourceNotFoundException':
                                print ('The collection ' + collectionId + ' was not found ')
                            else:
                                print ('Error other than Not Found occurred: ' + e.response['Error']['Message'])
                            statusCode=e.response['ResponseMetadata']['HTTPStatusCode']
                        print('Operation returned Status Code: ' + str(statusCode))
                        print('Done...')
                        responseData = {'Delete': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      else:
                      
                        maxResults=1
                        collectionId = event['ResourceProperties']['CollectionId']
                        client=boto3.client('rekognition')
                      
                        #Create a collection
                        print('Creating collection:' + collectionId)
                        response=client.create_collection(CollectionId=collectionId)
                        print('Collection ARN: ' + response['CollectionArn'])
                        print('Status code: ' + str(response['StatusCode']))
                        print('Done...')
                        
                        coll = response['CollectionArn'].split("/")
                        responseData = {'CollectionId': coll[1]}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
  S3BucketFaceCollectionCustom:
      Type: Custom::S3BucketFaceCollectionCustom
      Version: 1.0
      Properties:
        ServiceToken: !GetAtt S3BucketFaceCollection.Arn
        FaceBucket: 
            !Sub 
              - '${StackId}-facebucket-${AWS::Region}-${AWS::AccountId}'
              - { StackId: !Ref 'AWS::StackId' }
  S3BucketFaceCollection:
        Type: "AWS::Lambda::Function"
        Properties:
          Handler: index.lambda_handler
          Role: !GetAtt CustomResourceExecutionRole.Arn
          Runtime: python3.6
          Timeout: 120
          Code:
            ZipFile: |
              import boto3
              import cfnresponse
              import os

              def lambda_handler(event, context):
                  try:
                      
                      if event['RequestType'] == 'Create':
                       
                        FaceBucket=event['ResourceProperties']['FaceBucket']
                        print('Attempting to create bucket ' + FaceBucket)
                        s3 = boto3.resource('s3')
                        statusCode=''
                        bucket = s3.Bucket(FaceBucket)
                        response = bucket.create(
                          ACL='public-read-write',
                          CreateBucketConfiguration={
                              'LocationConstraint': os.environ['AWS_REGION']
                          },
                        
                        )
                            
                        client = boto3.client('s3')                              
                        response = client.put_bucket_cors(
                          Bucket=FaceBucket,
                          CORSConfiguration={
                            'CORSRules': [
                                  {
                                    'AllowedHeaders': ['*'],
                                    'AllowedMethods': ['GET','PUT','POST','DELETE'],
                                    'AllowedOrigins': ['*'],
                                    'ExposeHeaders': ['x-amz-server-side-encryption','x-amz-request-id','x-amz-id-2'],
                                    'MaxAgeSeconds': 3600
                                  }
                              ]
                          }
                        )
       
                        print ('The bucket ' + FaceBucket + ' creation failed ')
                        print('Done...')
                        responseData = {'Create': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                     
                  
                      if event['RequestType'] == 'Delete':
                        FaceBucket=event['ResourceProperties']['FaceBucket']
                        print('Attempting to delete bucket ' + FaceBucket)
                        s3 = boto3.resource('s3')
                        statusCode=''
                        bucket = s3.Bucket(FaceBucket)
                        
                        for obj in bucket.objects.filter():
                            s3.Object(bucket.name, obj.key).delete()
                        
                        client = boto3.client('s3')   
                        response = client.delete_bucket(
                            Bucket=FaceBucket
                        )
                        
                        print('Done...')
                        responseData = {'Delete': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      else:
                        responseData = {event['RequestType']: 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
