AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description : "Creates the Session Workflow StepFunctions" 

Outputs:
  SessionManagerFunction:
    Description: "The Session Manager Lambda Function ARN to connect with the SessionManagerSNSTopic in Step 2"
    Value: !GetAtt SessionManager.Arn

Parameters: 
  SumerianMessageQueueFIFO:
    Type: String
    Description: "Please enter the SumerianMessageQueueFIFO value from Step 2"
  WorkflowNotificationSNSTopic: 
    Type: String
    Description: "Please enter the WorkflowNotificationSNSTopic value from Step 2"
  WorkflowFunctionsExecutionRole:
    Type: String
    Description: "Please enter the WorkflowFunctionsExecutionRole value from Step 1"
Resources:

  ########################################################
  # Lambda Functions responsible for the entier workdlow #
  ########################################################
  SumerianMessenger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sumerianmessenger.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function responsible for putting Message into SumerianMessageQueueFIFO'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          QueueUrl: !Ref SumerianMessageQueueFIFO
          EmployeeTable: !Ref EmployeeTable
      Layers:
          - !Ref WorkflowManagerToolKit

  CheckFaceCaptured:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: checkfacecaptured.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function to check if face captured'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit

  ClearSession:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: clearsession.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function Responsible to clear session'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit

  SessionManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sessionmanager.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function Responsible to manage session being executed'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref NotificationResponseApi }
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit

  AppointmentLookup:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: appointmentlookup.lambda_handler
      Runtime: python3.6
      Description: 'Lambda Function responsible to check available appointment.'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          AppointmentTable: !Ref AppointmentTable
      Layers:
          - !Ref WorkflowManagerToolKit

  SendNotification:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sendnotification.lambda_handler
      Runtime: python3.6
      Description: 'Trigger Notification with a URL to response back'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref NotificationResponseApi }
          SNSTopic: 
            'Fn::Sub':
                  - "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNS}"
                  - { SNS: !Ref WorkflowNotificationSNSTopic }
          ActivityHostResponseArn: !Ref ActivityHostResponse
          ActivityHostArrivalArn: !Ref ActivityHostArrival
          SessionTable: !Ref SessionTable
      Layers:
          - !Ref WorkflowManagerToolKit
          
  ResponseManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: responsemanager.lambda_handler
      Runtime: python3.6
      Description: 'Manage Virtual Concierge Session'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Layers:
          - !Ref WorkflowManagerToolKit
          
  FlattenResponse:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: flattenresponse.lambda_handler
      Runtime: python3.6
      Description: 'Flatten Payload response from List of JSON to JSON'
      MemorySize: 1536
      Timeout: 15
      Role: !Ref WorkflowFunctionsExecutionRole
      CodeUri: ./workflow-lambda
      Layers:
          - !Ref WorkflowManagerToolKit
     
  WorkflowManagerToolKit:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./workflow-lambda/layers/smtoolkit/
      CompatibleRuntimes:
        - python3.6
      LicenseInfo: 'Apache License, Version 2.0 (the "License")'

  NotificationResponseApi:
    Type: 'AWS::Serverless::Api'
    Properties:
        Name: NotificationResponseApi
        StageName: Prod
        DefinitionBody: 
          swagger: "2.0"
          schemes:
          - "https"
          paths:
            /notifyguest:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "token"
                  in: "query"
                  required: true
                  type: "string"
                - name: "state"
                  in: "query"
                  required: true
                  type: "string"
                responses: {"200": {"description": "200 response","schema": {"$ref": "#/definitions/Empty"}}}
                x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
                x-amazon-apigateway-integration:
                  credentials: !Ref WorkflowFunctionsExecutionRole
                  uri: 
                    'Fn::Sub':
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${lambdafunc}/invocations"
                        - { lambdafunc: !GetAtt ResponseManager.Arn }
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "{\"HostResponse\":{\"ActivityToken\":\"$input.params('token')\",\"Response\":\"$input.params('state')\"}}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  type: "aws"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
          x-amazon-apigateway-request-validators:
            Validate query string parameters and headers:
              validateRequestParameters: true
              validateRequestBody: false
              
              
  ######################################
  # DynamoDB Tables to manage Sessions #
  ######################################

  
  SessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "VisitorId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "VisitorId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "WorkFlowSessionTable"
  
  AppointmentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "GuestId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "GuestId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "WorkFlowAppointmentTable"

  EmployeeTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "EmployeeId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "EmployeeId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "WorkFlowEmployeeTable"


  #############################################
  # StepFunction Resources to manage Sessions #
  #############################################

  ActivityHostResponse:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: ActivityHostResponse
      
  ActivityHostArrival:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: ActivityHostArrival

  WorkFlowStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: "WorkFlowStateMachine"
      DefinitionString: 
                  !Sub  
                    - |-
                        {
                        	"Comment": "[Sumerian] State Machine",
                        	"StartAt": "Check detected face",
                        	"States": {
                        		"Check detected face": {
                        			"Type": "Task",
                        			"Resource": "${CheckFaceCaptured}",
                        			"Next": "Do we know the Face ?"
                        		},
                        		"Do we know the Face ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] unkown guest message"
                        				},
                        				{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] greet guest"
                        				}
                        			],
                        			"Default": "[Sumerian] unkown guest message"
                        		},
                        		"[Sumerian] unkown guest message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "UnknownGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"End": true
                        		},
                        		"[Sumerian] no appointment message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NoAppointment",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Clear Session"
                        		},
                        		"[Sumerian] greet guest": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "GreetGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Lookup Appointment"
                        		},
                        		"Lookup Appointment": {
                        			"Type": "Task",
                        			"Resource": "${AppointmentLookup}",
                        			"Next": "Do we found any appointment ?"
                        		},
                        		"Do we found any appointment ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] notify host message"
                        				},
                        				{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] no appointment message"
                        				}
                        			],
                        			"Default": "[Sumerian] no appointment message"
                        		},
                        		"[Sumerian] notify host message": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NotifyHost",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Send notification to host"
                        		},
                        
                        		"Send notification to host": {
                        			"Type": "Parallel",
                        			"Next": "Flatten response payload",
                        			"Branches": [{
                        					"StartAt": "Notify host",
                        					"States": {
                        						"Notify host": {
                        							"Type": "Task",
                        							"Resource": "${SendNotification}",
                        							"Parameters" : {
                                			  "Activity" : "HostResponse",
                                			  "PreviousStateOutput.$" : "$"
                                			},
                        							"End": true
                        						}
                        					}
                        				},
                        				{
                        					"StartAt": "ActivityJob-Wait for host response",
                        					"States": {
                        						"ActivityJob-Wait for host response": {
                        							"Type": "Task",
                        							"Resource": "${ActivityHostResponse}",
                        							"End": true
                        						}
                        					}
                        				}
                        			]
                        		},
                        		"Flatten response payload": {
                        			"Type": "Task",
                        			"Resource": "${FlattenResponse}",
                        			"Next": "Has the host responded ?"
                        		}, 	
                        		"Has the host responded ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "NotifyGuest",
                        					"Next": "[ Sumerian ] Notify Visitor on Host Response"
                        				},
                        				{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "RemindHost",
                        					"Next": "[ Sumerian ] Notify Visitor on Remind Host"
                        				}
                        			],
                        			"Default": "[ Sumerian ] Notify Visitor on Remind Host"
                        		},
                        		"[ Sumerian ] Notify Visitor on Remind Host": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Next": "Send notification to host"
                        		}, 		
                        		"[ Sumerian ] Notify Visitor on Host Response": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Next": "Notify Visitor and Wait"
                        		},
                        		"Notify Visitor and Wait": {
                        			"Type": "Parallel",
                        			"Next": "[Sumerian] Notify host and guest on meeting room number",
                        			"Branches": [{
                        					"StartAt": "[Sumerian] notify guest on host arrival",
                        					"States": {
                        						"[Sumerian] notify guest on host arrival": {
                        							"Type": "Task",
                        							"Resource": "${SendNotification}",
                        							"Parameters" : {
                                			  "Activity" : "HostArrival",
                                			  "PreviousStateOutput.$" : "$"
                                			},
                        							"End": true
                        						}
                        					}
                        				},
                        				{
                        					"StartAt": "ActivityJob-Wait for Host Arrival",
                        					"States": {
                        						"ActivityJob-Wait for Host Arrival": {
                        							"Type": "Task",
                        							"Resource": "${ActivityHostArrival}",
                        							"End": true
                        						}
                        					}
                        				}
                        			]
                        		},
                        		"[Sumerian] Notify host and guest on meeting room number": {
                        			"Type": "Task",
                        			"Resource": "${SumerianMessenger}",
                        			"Next": "Clear Session"
                        		},
                        		"Clear Session":{
                        			"Type": "Task",
                        			"Resource": "${ClearSession}",
                        			"End": true
                        		}
                        	}
                        }
                    - { ClearSession: !GetAtt ClearSession.Arn, FlattenResponse: !GetAtt FlattenResponse.Arn, SendNotification: !GetAtt SendNotification.Arn, ActivityHostResponse: !Ref ActivityHostResponse , ActivityHostArrival: !Ref ActivityHostArrival , SumerianMessenger: !GetAtt SumerianMessenger.Arn, CheckFaceCaptured: !GetAtt CheckFaceCaptured.Arn, AppointmentLookup: !GetAtt AppointmentLookup.Arn }
      RoleArn: !Ref WorkflowFunctionsExecutionRole
