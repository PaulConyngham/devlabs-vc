AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description : "Creates the Session Workflow StepFunctions" 

Parameters: 
  StateMachineName: 
    Type: String
    Default: ReceptionWorkflow
    Description: Reception State Machine Name 

  HostSNSTopic: 
    Type: String
    Default: HostSNSTopic
    Description: Reception Host Response API

Resources:
  ExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "apigateway.amazonaws.com"
                  - "lambda.amazonaws.com"
                  -
                    Fn::Join:
                      - ""
                      - - "states."
                        -
                          Ref: "AWS::Region"
                        - ".amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "Policies"
            PolicyDocument:
              Statement:
                -
                  Effect: "Allow"
                  Action: "*"
                  Resource: "*"

  SumerianMessageQueueFIFO:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "SumerianMessageQueue.fifo"
      FifoQueue: true
                  
#### SESSION FUNCTIONS

  sumerianmessenger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sumerianmessenger.lambda_handler
      Runtime: python3.6
      Description: 'Send Message to Summerian Host'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          QueueUrl: !Ref SumerianMessageQueueFIFO
          employeetable: !Ref employeetable
      Layers:
          - !Ref sessionmanagertoolkit

  checkfacecaptured:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: checkfacecaptured.lambda_handler
      Runtime: python3.6
      Description: 'Check if face captured or not.'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          sessiontable: !Ref sessiontable
      Layers:
          - !Ref sessionmanagertoolkit

  clearsession:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: clearsession.lambda_handler
      Runtime: python3.6
      Description: 'Check if face captured or not.'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          sessiontable: !Ref sessiontable
      Layers:
          - !Ref sessionmanagertoolkit

  sessionmanager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sessionmanager.lambda_handler
      Runtime: python3.6
      Description: 'Check if face captured or not.'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref hostresponseapi }
          sessiontable: !Ref sessiontable
      Layers:
          - !Ref sessionmanagertoolkit

  appointmentlookup:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: appointmentlookup.lambda_handler
      Runtime: python3.6
      Description: 'Check face detected for Appointment'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          appointmenttable: !Ref appointmenttable
      Layers:
          - !Ref sessionmanagertoolkit

  hostmessenger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: hostmessenger.lambda_handler
      Runtime: python3.6
      Description: 'Trigger Slack API to notify guest arrival'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Environment:
        Variables:
          ResponseUrl: 
            'Fn::Sub':
                  - "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/notifyguest"
                  - { Api: !Ref hostresponseapi }
          SNSTopic: !Ref snshost
          ActivityHostResponseArn: !Ref activityhostresponse
          ActivityHostArrivalArn: !Ref activityhostarrival
          sessiontable: !Ref sessiontable
      Layers:
          - !Ref sessionmanagertoolkit
          
  hostresponsemanager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: hostresponsemanager.lambda_handler
      Runtime: python3.6
      Description: 'Manage Virtual Concierge Session'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Layers:
          - !Ref sessionmanagertoolkit
          
          
  flattenresponse:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: flattenresponse.lambda_handler
      Runtime: python3.6
      Description: 'Flatten Payload response from List of JSON to JSON'
      MemorySize: 1536
      Timeout: 15
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ./sessionhandler-lambda
      Layers:
          - !Ref sessionmanagertoolkit
     
### API
  sessionmanagertoolkit:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./sessionhandler-lambda/layers/smtoolkit/
      CompatibleRuntimes:
        - python3.6
      LicenseInfo: 'Apache License, Version 2.0 (the "License")'

### TODO: Use AWS::Serverless::Function' with event type of API

  hostresponseapi:
    Type: 'AWS::Serverless::Api'
    Properties:
        Name: hostresponseapi
        StageName: Prod
        DefinitionBody: 
          swagger: "2.0"
          schemes:
          - "https"
          paths:
            /notifyguest:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "token"
                  in: "query"
                  required: true
                  type: "string"
                - name: "state"
                  in: "query"
                  required: true
                  type: "string"
                responses: {"200": {"description": "200 response","schema": {"$ref": "#/definitions/Empty"}}}
                x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
                x-amazon-apigateway-integration:
                  credentials: 
                      'Fn::GetAtt' :
                        - ExecutionRole
                        - Arn
                  uri: 
                    'Fn::Sub':
                        - "arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${lambdafunc}/invocations"
                        - { lambdafunc: !GetAtt hostresponsemanager.Arn }
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "{\"HostResponse\":{\"ActivityToken\":\"$input.params('token')\",\"Response\":\"$input.params('state')\"}}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  type: "aws"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
          x-amazon-apigateway-request-validators:
            Validate query string parameters and headers:
              validateRequestParameters: true
              validateRequestBody: false

#####

  snshost: 
    Type: "AWS::SNS::Topic"
    Properties:
       DisplayName: !Ref HostSNSTopic
  
  sessiontable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "VisitorId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "VisitorId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      # TableName: "virtual-concierge-session"
  
  appointmenttable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "GuestId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "GuestId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      # TableName: "virtual-concierge-appointment-table"

### TODO: Add 'Visitor' and rename 'Employee' to 'Host'

  employeetable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "EmployeeId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "EmployeeId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      # TableName: "virtual-concierge-employee-table"


  activityhostresponse:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: activitynewhostresponse
      
  activityhostarrival:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: activitynewhostarrival

  receptionstatemachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref StateMachineName
      DefinitionString: 
                  !Sub  
                    - |-
                        {
                        	"Comment": "[Sumerian] State Machine",
                        	"StartAt": "Check detected face",
                        	"States": {
                        		"Check detected face": {
                        			"Type": "Task",
                        			"Resource": "${checkfacecaptured}",
                        			"Next": "Do we know the Face ?"
                        		},
                        		"Do we know the Face ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] unkown guest message"
                        				},
                        				{
                        					"Variable": "$.FaceDetection.Recognised",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] greet guest"
                        				}
                        			],
                        			"Default": "[Sumerian] unkown guest message"
                        		},
                        		"[Sumerian] unkown guest message": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "UnknownGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"End": true
                        		},
                        		"[Sumerian] no appointment message": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NoAppointment",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Clear Session"
                        		},
                        		"[Sumerian] greet guest": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "GreetGuest",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Lookup Appointment"
                        		},
                        		"Lookup Appointment": {
                        			"Type": "Task",
                        			"Resource": "${appointmentlookup}",
                        			"Next": "Do we found any appointment ?"
                        		},
                        		"Do we found any appointment ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "True",
                        					"Next": "[Sumerian] notify host message"
                        				},
                        				{
                        					"Variable": "$.Appointment.Found",
                        					"StringEquals": "False",
                        					"Next": "[Sumerian] no appointment message"
                        				}
                        			],
                        			"Default": "[Sumerian] no appointment message"
                        		},
                        		"[Sumerian] notify host message": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Parameters" : {
                        			  "SumerianMessageType" : "NotifyHost",
                        			  "PreviousStateOutput.$" : "$"
                        			},
                        			"Next": "Send notification to host"
                        		},
                        
                        		"Send notification to host": {
                        			"Type": "Parallel",
                        			"Next": "Flatten response payload",
                        			"Branches": [{
                        					"StartAt": "Notify host",
                        					"States": {
                        						"Notify host": {
                        							"Type": "Task",
                        							"Resource": "${hostmessenger}",
                        							"Parameters" : {
                                			  "Activity" : "HostResponse",
                                			  "PreviousStateOutput.$" : "$"
                                			},
                        							"End": true
                        						}
                        					}
                        				},
                        				{
                        					"StartAt": "ActivityJob-Wait for host response",
                        					"States": {
                        						"ActivityJob-Wait for host response": {
                        							"Type": "Task",
                        							"Resource": "${activityhostresponse}",
                        							"End": true
                        						}
                        					}
                        				}
                        			]
                        		},
                        		"Flatten response payload": {
                        			"Type": "Task",
                        			"Resource": "${flattenresponse}",
                        			"Next": "Has the host responded ?"
                        		}, 	
                        		"Has the host responded ?": {
                        			"Type": "Choice",
                        			"Choices": [{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "NotifyGuest",
                        					"Next": "[ Sumerian ] Notify Visitor on Host Response"
                        				},
                        				{
                        					"Variable": "$.SumerianMessageType",
                        					"StringEquals": "RemindHost",
                        					"Next": "[ Sumerian ] Notify Visitor on Remind Host"
                        				}
                        			],
                        			"Default": "[ Sumerian ] Notify Visitor on Remind Host"
                        		},
                        		"[ Sumerian ] Notify Visitor on Remind Host": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Next": "Send notification to host"
                        		}, 		
                        		"[ Sumerian ] Notify Visitor on Host Response": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Next": "Notify Visitor and Wait"
                        		},
                        		"Notify Visitor and Wait": {
                        			"Type": "Parallel",
                        			"Next": "[Sumerian] Notify host and guest on meeting room number",
                        			"Branches": [{
                        					"StartAt": "[Sumerian] notify guest on host arrival",
                        					"States": {
                        						"[Sumerian] notify guest on host arrival": {
                        							"Type": "Task",
                        							"Resource": "${hostmessenger}",
                        							"Parameters" : {
                                			  "Activity" : "HostArrival",
                                			  "PreviousStateOutput.$" : "$"
                                			},
                        							"End": true
                        						}
                        					}
                        				},
                        				{
                        					"StartAt": "ActivityJob-Wait for Host Arrival",
                        					"States": {
                        						"ActivityJob-Wait for Host Arrival": {
                        							"Type": "Task",
                        							"Resource": "${activityhostarrival}",
                        							"End": true
                        						}
                        					}
                        				}
                        			]
                        		},
                        		"[Sumerian] Notify host and guest on meeting room number": {
                        			"Type": "Task",
                        			"Resource": "${sumerianmessenger}",
                        			"Next": "Clear Session"
                        		},
                        		"Clear Session": {
                        			"Type": "Task",
                        			"Resource": "${clearsession}",
                        			"End": true
                        		}
                        	}
                        }
                    - { clearsession: !GetAtt clearsession.Arn, flattenresponse: !GetAtt flattenresponse.Arn, hostmessenger: !GetAtt hostmessenger.Arn, activityhostresponse: !Ref activityhostresponse , activityhostarrival: !Ref activityhostarrival , sumerianmessenger: !GetAtt sumerianmessenger.Arn, checkfacecaptured: !GetAtt checkfacecaptured.Arn, appointmentlookup: !GetAtt appointmentlookup.Arn }
      RoleArn: !GetAtt ExecutionRole.Arn
